package org.narson.narsese.provider;

interface NarseseSymbols
{
  int SYMBOL_MASK = 1 << 17;

  /*
   * Sentence
   */
  int SENTENCE = 1 | SYMBOL_MASK;
  int JUDGMENT = 2 | SYMBOL_MASK;
  int GOAL = 3 | SYMBOL_MASK;
  int QUESTION = 4 | SYMBOL_MASK;
  int QUERY = 5 | SYMBOL_MASK;

  /*
   * Term
   */
  int TERM = 20 | SYMBOL_MASK;
  int TERMS = 21 | SYMBOL_MASK;
  int PREFIXED_TERMS = 22 | SYMBOL_MASK;

  int VARIABLE = 40 | SYMBOL_MASK;
  int DEPENDENT_VARIABLE = 41 | SYMBOL_MASK;
  int DEPENDENT_INDEPENDENT_VARIABLES = 42 | SYMBOL_MASK;
  int INDEPENDENT_VARIABLE = 43 | SYMBOL_MASK;
  int ANONYMOUS_DEPENDENT_VARIABLE = 44 | SYMBOL_MASK;
  int QUERY_VARIABLE = 45 | SYMBOL_MASK;

  int RELATION = 60 | SYMBOL_MASK;
  int COPULA = 61 | SYMBOL_MASK;
  int INHERITANCE = 62 | SYMBOL_MASK;
  int SIMILARITY = 63 | SYMBOL_MASK;
  int IMPLICATION = 64 | SYMBOL_MASK;
  int EQUIVALENCE = 65 | SYMBOL_MASK;
  int INSTANCE = 66 | SYMBOL_MASK;
  int PROPERTY = 67 | SYMBOL_MASK;
  int INSTANCE_PROPERTY = 68 | SYMBOL_MASK;
  int PREDICTIVE_IMPLICATION = 69 | SYMBOL_MASK;
  int RETROSPECTIVE_IMPLICATION = 70 | SYMBOL_MASK;
  int CONCURRENT_IMPLICATION = 71 | SYMBOL_MASK;
  int PREDICTIVE_EQUIVALENCE = 72 | SYMBOL_MASK;
  int CONCURRENT_EQUIVALENCE = 73 | SYMBOL_MASK;

  int OPERATION = 80 | SYMBOL_MASK;

  int COMPOUND_TERM = 100 | SYMBOL_MASK;
  int BI_CONNECTOR = 101 | SYMBOL_MASK;
  int BIPLUS_CONNECTOR = 102 | SYMBOL_MASK;
  int EXTENSIONAL_INTERSECTION = 103 | SYMBOL_MASK;
  int INTENSIONAL_INTERSECTION = 104 | SYMBOL_MASK;
  int EXTENSIONAL_DIFFERENCE = 105 | SYMBOL_MASK;
  int INTENSIONAL_DIFFERENCE = 106 | SYMBOL_MASK;
  int PRODUCT = 107 | SYMBOL_MASK;
  int IMAGE = 108 | SYMBOL_MASK;
  int EXTENSIONAL_IMAGE = 109 | SYMBOL_MASK;
  int INTENSIONAL_IMAGE = 110 | SYMBOL_MASK;
  int CONJUNCTION = 111 | SYMBOL_MASK;
  int DISJUNCTION = 112 | SYMBOL_MASK;
  int SEQUENTIAL_CONJUNCTION = 113 | SYMBOL_MASK;
  int PARALLEL_CONJUNCTION = 114 | SYMBOL_MASK;

  /*
   * Tense
   */
  int TENSE = 120 | SYMBOL_MASK;
  int PAST_TENSE = 121 | SYMBOL_MASK;
  int PRESENT_TENSE = 122 | SYMBOL_MASK;
  int FUTURE_TENSE = 123 | SYMBOL_MASK;

  /*
   * Truth
   */
  int TRUTH = 140 | SYMBOL_MASK;

  /*
   * Near leaf nodes
   */
  int WORD = 160 | SYMBOL_MASK;
  int WORD_TOKENS = 161 | SYMBOL_MASK;
  int NUMBER = 162 | SYMBOL_MASK;
  int DECIMAL = 163 | SYMBOL_MASK;
  int WHITESPACE = 164 | SYMBOL_MASK;
  int LETTER = 165 | SYMBOL_MASK;
  int DIGIT = 166 | SYMBOL_MASK;
  int DIGITS = 167 | SYMBOL_MASK;
  int SKIP = 168 | SYMBOL_MASK;
  int COMMENT = 169 | SYMBOL_MASK;
  int EMPTY = 170 | SYMBOL_MASK;
  int ANYTHINGS = 171 | SYMBOL_MASK;
  int ANYTHING = 172 | SYMBOL_MASK;
  int EMPTY_WORD = 173 | SYMBOL_MASK;
}
